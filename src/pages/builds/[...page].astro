---
export const prerender = false;

import Layout from "@/layouts/Layout";

import { getCollection } from "astro:content";
import { paginate } from "@/functions/Paginate";
import Build from "@/components/builds/snippets/Build";
import Container from "@/components/Container";
import Map from "@/components/backgrounds/Map";
import Pagination from "@/components/Pagination";

const allMakes = await getCollection("makes");
const allModels = await getCollection("models");

const makeParam = Astro.url.searchParams.get("buildMake");
const modelParam = Astro.url.searchParams.get("buildModel");
const searchParam = Astro.url.searchParams.get("search");

const actualModelArray = allModels.filter((m) => m.id == modelParam);
const actualModel = actualModelArray[0];

let filteredModels = [];
for (const model of allModels) {
	if (model.data.make.slug === makeParam) {
		filteredModels.push(model);
	}
}

// filter and search shoots
async function getFilteredBuilds(make, model, search) {
	const searchRegex = searchParam && new RegExp(searchParam, "i");
	const builds = await getCollection("builds");

	const filteredBuilds = builds.filter((build) => {
		if (makeParam && modelParam) {
			if (build.data.vehicle.make.slug !== makeParam || build.data.vehicle.model.slug !== modelParam) {
				return false;
			}
		}

		if (searchRegex) {
			return searchRegex.test(build.data.vehicle.year) || searchRegex.test(build.data.title) || searchRegex.test(build.data.vehicle.trim) || searchRegex.test(build.id);
		}

		return true;
	});

	return filteredBuilds;
}

const postFilteredBuilds = await getFilteredBuilds(makeParam, modelParam, searchParam);

const currentPage = Astro.params.page === undefined ? 1 : Number.parseInt(Astro.params.page);
const paginatedResults = paginate({
	data: postFilteredBuilds,
	pageSize: 6,
	currentPage,
	route: "/builds/[...page]",
	searchParams: Astro.url.searchParams,
});

const { page, allPages } = paginatedResults;

// make sure the requested page number is valid, if not redirect to the first page of results
if (allPages.length && !page) {
	return Astro.redirect(allPages[0]);
}
---

<Layout title="Texas High-Performance Off-Road Vehicle Builds" description="THOR Off-Road is the top off-road parts and installation outfitter in Texas for Ford Chevrolet GMC RAM Toyota Lexus Jeep">
	<div class="section section-small section-top space-y-24 bg-chathams-blue-600 pb-8 md:pb-0">
		<Container classes="space-y-8">
			<div class="space-y-8 text-white max-w-2xl">
				<h1 class="text-balance uppercase">THOR Off-Road <strong>Custom Builds</strong></h1>
				<p class="text-base md:text-xl text-balance md:!leading-relaxed">We're designing and building amazing vehicles each and every day. Browse through a small selection of our most recent finished builds.</p>
			</div>

			<form class="grid grid-cols-1 md:grid-cols-6 bg-chathams-blue-700 p-8 rounded md:rounded-b-none gap-6" method="get">
				<div class="flex flex-col gap-2 w-full md:col-span-2">
					<div class="flex justify-between items-center">
						<div class="uppercase text-lg font-bold font-alt text-white">Search</div>

						<a href="/builds" class:list={["uppercase text-xs text-white font-medium", Astro.url.searchParams.get("search") ? "visible" : "hidden"]} id="clearSearch"> Clear </a>
					</div>

					<div class="relative">
						<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="h-4 w-4 text-stone-400">
								<path fill-rule="evenodd" d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" clip-rule="evenodd"></path>
							</svg>
						</div>

						<input type="text" name="search" id="search" class="!pl-9 input-secondary" placeholder="Search" value={searchParam} />
					</div>
				</div>

				<div class="flex flex-col gap-2 md:col-span-4 lg:col-span-3 lg:col-start-4">
					<div class="flex justify-between items-center">
						<div class="uppercase text-lg font-bold font-alt text-white">Filters</div>

						<a href="/builds" class:list={["uppercase text-xs text-white font-medium", Astro.url.searchParams.get("buildMake") ? "visible" : "hidden"]} id="clearFilters"> Clear </a>
					</div>

					<div class="flex flex-col sm:flex-row lg:justify-between lg:items-center gap-4">
						<select name="buildMake" id="buildMake" class="input-secondary">
							<option value="" disabled selected>Choose a Make</option>
							{
								allMakes.map((m) => (
									<option value={m.id} selected={makeParam === m.id}>
										{m.data.title}
									</option>
								))
							}
						</select>

						<select name="buildModel" id="buildModel" class="input-secondary">
							<option value="" disabled selected>Choose a Model</option>
							{
								filteredModels.map((m) => (
									<option value={m.id} selected={modelParam === m.id}>
										{m.data.title}
									</option>
								))
							}
						</select>

						<button type="submit" class="button button-primary button-inverse">Filter</button>
					</div>
				</div>
			</form>
		</Container>
	</div>

	<Map classes="bg-rock-900 section section-small" theme="light">
		<Container classes="space-y-8">
			{
				page.data.length > 0 && (
					<>
						<div class="flex justify-between items-center">
							<div class="text-2xl font-semibold font-alt uppercase text-white">{page.total} Builds</div>
							{allPages.length > 1 && <Pagination restRoute page={page} allPages={allPages} />}
						</div>
						<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
							{paginatedResults.page.data.map((b) => (
								<Build build={b.id} sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw" />
							))}
						</div>
						<div class="flex justify-center items-center">{allPages.length > 1 && <Pagination restRoute page={page} allPages={allPages} />}</div>
					</>
				)
			}
			<!-- {
				page.data.length == 0 && (
					<div class="flex justify-center items-center">
						<div class="max-w-2xl text-center space-y-4">
							{makeParam && modelParam && (
								<div class="uppercase font-alt font-medium text-5xl text-balance">
									We Need Your <span class="font-extrabold">{actualModel.title}</span>!
								</div>
								<div class="text-xl text-balance leading-relaxed">
									It's been awhile since we've built a {actualModel.title} here at THOR. We'd love to{" "}
									<a href="/contact" class="font-semibold underline">
										get in touch
									</a>{" "}
									to discuss your needs and show you what's possible.
								</div>
							)}
							{searchParam && !modelParam && !makeParam && (
								<div class="uppercase font-alt font-medium text-5xl text-balance">
									Hmm, no builds found for <span class="font-extrabold">{searchParam}</span>.
								</div>
							)}
						</div>
					</div>
				)
			} -->
		</Container>
	</Map>
</Layout>

<script is:inline define:vars={{ allMakes, allModels }}>
	// get models from make
	const selectMake = document.getElementById("buildMake");
	const selectModel = document.getElementById("buildModel");
	getModelsFromMake(allMakes, allModels, selectMake, selectModel, false, true);

	// delete url params
	const paramSearch = document.getElementById("clearSearch");
	const paramFilter = document.getElementById("clearFilters");

	paramSearch.addEventListener("click", function (event) {
		event.preventDefault();
		deleteParam(["search"]);
	});
	paramFilter.addEventListener("click", function (event) {
		event.preventDefault();

		deleteParam(["buildMake", "buildModel"]);
	});

	function deleteParam(param) {
		const url = new URL(window.location.href);

		param.forEach((p) => url.searchParams.delete(p));
		window.location.href = url.toString();
	}
</script>
