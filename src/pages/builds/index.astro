---
import Layout from "@/layouts/Layout";

import { type CollectionEntry, getCollection } from "astro:content";
import { getBuildTitle } from "@/functions/Content";
import BuildFilter from "@/components/builds/BuildFilter";
import Build from "@/components/content/snippets/Build";
import Button from "@/components/Button";
import Container from "@/components/Container";
import FlexColumn from "@/components/content/FlexColumn";
import Icon from "@/components/Icon";
import Map from "@/components/content/Map";
import Picture from "@/components/images/Picture";

//const allParts = await getCollection("parts");
const allMakes = await getCollection("makes");
const allModels = await getCollection("models");

//const partParams = Astro.url.searchParams.getAll("parts[]");
const makeParam = Astro.url.searchParams.get("buildMake");
const modelParam = Astro.url.searchParams.get("buildModel");
let filteredModels = [];
for (const model of allModels) {
	if (model.data.make.id === makeParam) {
		filteredModels.push(model);
	}
}

// search
const searchParam = Astro.url.searchParams.get("search");
const searchRegex = searchParam && new RegExp(searchParam, "i");

// filter and search shoots
function buildsFilter(build) {
	// if (partParams && partParams.length > 0) {
	// 	for (const part of partParams) {
	// 		return build.data.categories.some((partObj) => partObj.id === part);
	// 	}
	// }

	if (makeParam && modelParam) {
		let model = modelParam.replace(/\+/g, "-").toLowerCase();
		return build.data.meta.model.id === `${makeParam.toLowerCase()}-${model}`;
	}

	if (searchRegex) {
		const title = `${build.data.meta.year} ${build.data.meta.make.id} ${build.data.meta.model.id} ${build.data.meta.trim ? ` ${build.data.meta.trim}` : ``}`;

		return searchRegex.test(title);
	}

	return true;
}

// get integrations, filtered by the applied search & filter, then sort the matches
const filteredBuilds = (await getCollection("builds", buildsFilter)).sort((a, b) => b.data.date.getTime() - a.data.date.getTime());
---

<Layout title="Texas High-Performance Off-Road Vehicle Builds" description="THOR Off-Road is the top off-road parts and installation outfitter in Texas for Ford Chevrolet GMC RAM Toyota Lexus Jeep">
	<div class="section section-top space-y-24 bg-torch-red-600 text-white">
		<Container classes="space-y-8">
			<div class="space-y-8 text-white max-w-2xl">
				<h1 class="text-balance uppercase">THOR Off-Road <strong>Custom Builds</strong></h1>
				<p class="text-xl">We're designing and building amazing vehicles each and every day. Browse through a small selection of our most recent finished builds.</p>
			</div>

			<form class="flex flex-row justify-between gap-12 bg-shiraz-600 p-8 rounded-t" method="get">
				<div class="flex flex-col gap-2">
					<div class="uppercase text-lg font-bold font-alt text-white">Search</div>

					<div class="relative">
						<div class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
							<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="h-4 w-4 text-gray-400">
								<path fill-rule="evenodd" d="M9.965 11.026a5 5 0 1 1 1.06-1.06l2.755 2.754a.75.75 0 1 1-1.06 1.06l-2.755-2.754ZM10.5 7a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0Z" clip-rule="evenodd"></path>
							</svg>
						</div>
						<input type="text" name="search" id="search" class="!pl-9" placeholder="Search" value={searchParam} />
					</div>
				</div>

				<div class="flex flex-col gap-2">
					<div class="flex justify-between items-center">
						<div class="uppercase text-lg font-bold font-alt text-white">Filters</div>

						<a href="/builds">
							<Icon icon="hero/XCircleFill" class="size-6 text-white" />
						</a>
					</div>

					<div class="flex justify-between items-center gap-4">
						<select name="buildMake" id="buildMake" class="w-[12em]">
							<option value="" disabled selected>Choose a Make</option>
							{
								allMakes.map((m) => (
									<option value={m.data.title.toLowerCase()} selected={makeParam === m.data.title.toLowerCase()}>
										{m.data.title}
									</option>
								))
							}
						</select>

						<select name="buildModel" id="buildModel" class="w-[12em]">
							<option value="" disabled selected>Choose a Model</option>
							{
								filteredModels.map((m) => (
									<option value={m.data.slug} selected={modelParam === m.data.slug}>
										{m.data.title}
									</option>
								))
							}
						</select>

						<Button type="submit" style="button-primary" inverse={true}> Filter Shoots </Button>
					</div>
				</div>
			</form>
		</Container>
	</div>

	<Map classes="section bg-rock-100" fill="bg-rock-600" opacity={0.05}>
		<Container>
			<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
				{filteredBuilds.map((b) => <Build build={b} sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw" />)}
			</div>
		</Container>
	</Map>
</Layout>

<script is:inline define:vars={{ allModels }}>
	const selectMake = document.getElementById("buildMake");
	const selectModel = document.getElementById("buildModel");

	getModelsFromMake(allModels, selectMake, selectModel, false, true);
</script>
