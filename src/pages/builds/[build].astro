---
import Layout from "@/layouts/Layout";

// imports
import { supabaseService } from "@/library/supabase";
import { getBuildImage } from "@/functions/Image";
import { getBuildTitle } from "@/functions/Content";
import { getEntry, getCollection } from "astro:content";
import { timeAgo } from "@/functions/DateTime";
import { numberBetween } from "@/functions/Misc";

import Container from "@/components/Container";
import Map from "@/components/backgrounds/Map";
import Picture from "@/components/images/Picture";
import Testimonial from "@/components/testimonials/Testimonial";

export async function getStaticPaths() {
	const builds = await supabaseService.from("builds").select("*, makes (*), models (*), builds_images (*), builds_parts (*), builds_parts_installed (parts_installed_id (*)), testimonials (*)");

	return builds.data.map((build) => ({
		params: { build: build.slug },
		props: { build },
	}));
}

// content
const { build } = Astro.props;

// create image array and remove the featured image from the array
//const imageArray = Array.from({ length: buildData.data.images.total - 0 }, (_, i) => 0 + 1 + i);
//const removals = [buildData.data.images.highlight[0], buildData.data.images.highlight[1], buildData.data.images.snippet];

// const imagesWithoutHero = imageArray.filter((item) => item !== buildData.data.images.snippet);
// const imagesWithoutAll = imageArray.filter((item) => !removals.includes(item));

const imageCols = build.builds_images.length >= 9 ? `grid-cols-1 md:grid-cols-3` : `grid-cols-1 md:grid-cols-2`; // based on the total number of images, how many columns are needed
const remainder = build.builds_images.length >= 9 ? build.builds_images.length % 3 : build.builds_images.length % 2;
const colSpan = build.builds_images.length >= 9 ? 4 - remainder : 3 - remainder;
const colWidth = 450;

console.log(build.builds_parts);
---

<Layout title={`Custom ${await getBuildTitle(build.slug)} Built by THOR Off-Road`}>
	<div class="bg-torch-red-600 text-white section section-small">
		<Container classes="space-y-4">
			<h1 class="text-balance uppercase font-bold text-center lg:text-left lg:max-w-3xl">{getBuildTitle(build.slug)}</h1>

			<div class="flex flex-col items-center sm:flex-row gap-4 justify-center lg:justify-start">
				<div>Completed {timeAgo(build.created_at)}</div>
				<div class="hidden sm:block">&middot;</div>
				<a href={`builds?buildMake=${build.makes.id}&buildModel=${build.models.id}`} class="font-semibold hover:underline">More {build.models.title} Builds &gt;</a>
			</div>
		</Container>
	</div>

	<Map classes="bg-rock-100 section section-small space-y-24">
		<Container classes="space-y-8">
			<div class="grid grid-cols-6 grid-rows-2 gap-4 sm:gap-8 h-full md:h-[40vh] lg:h-[700px] gallery">
				<Picture src={build.builds_images[0].image_name} class:list={["w-full h-full object-cover row-span-2 rounded shadow-2xl", build.builds_images.length >= 9 ? "col-span-6 md:col-span-4" : "col-span-6"]} loading="eager" />
				{
					build.builds_images.length >= 9 && (
						<>
							<Picture src={build.builds_images[1].image_name} class="object-cover w-full h-full rounded shadow-2xl col-span-3 md:col-span-2" loading="eager" />
							<Picture src={build.builds_images[2].image_name} class="object-cover w-full h-full rounded shadow-2xl col-span-3 md:col-span-2" loading="eager" />
						</>
					)
				}
			</div>
		</Container>
	</Map>

	<Map classes="bg-rock-200 section section-small">
		<Container>
			<div class="grid grid-cols-5 gap-4 lg:gap-8">
				<div class="col-span-5 md:col-span-2 w-full h-full">
					<div class="sticky top-36 space-y-8">
						<div class="bg-rock-300/70 px-8 py-12 rounded">
							<div class="space-y-12">
								{
									build.goals && (
										<div class="space-y-6">
											<div class="uppercase text-4xl font-alt font-medium">Summary</div>
											<div class="space-y-6 text-lg leading-loose" set:html={build.goals} />
										</div>
									)
								}

								<div class="space-y-4">
									<div class="uppercase text-4xl font-alt font-medium"><strong>Parts</strong> List</div>
									<div class="space-y-2 text-sm md:text-xs lg:text-base">
										{build.builds_parts_installed.map((p) => <div>{p["parts_installed_id"].title}</div>)}
									</div>
								</div>

								{
									build.testimonials.length > 0 && (
										<div class="text-base space-y-4">
											<Testimonial content={build.testimonials[0]} />
										</div>
									)
								}

								<!-- {
									buildData.data.video && (
										<div class="align-self-end flex-none">
											<a
												href={getMedia(`images/builds/${buildData.id}/${buildData.data.video.filename}.mp4`)}
												data-sources={`[{"src":"${getMedia(`images/builds/${buildData.id}/${buildData.data.video.filename}.mp4`)}", "type": "video/mp4" }]`}
												data-width={buildData.data.video.width}
												data-height={buildData.data.video.height}
												class="video text-xs sm:text-sm flex items-center font-medium gap-2"
											>
												<span>
													Watch the
													<br />
													Build Video
												</span>
												<Icon icon="hero/PlayCircleFill" class="h-6 sm:h-10" />
											</a>
										</div>
									)
								} -->
							</div>
						</div>

						<div class="bg-chathams-blue-600 text-white px-8 py-12 rounded">
							<div class="hidden lg:block space-y-8">
								<div class="uppercase text-4xl font-alt font-medium">Let's <strong>Get Started</strong></div>
								<div class="leading-relaxed">
									There are endless options for your {build.models.title} and we can help design, build and install everthing needed for your adventure. Give us a call or e-mail and let's get started today!
								</div>
								<a href="/contact" class="button button-secondary justify-center">Build Your {build.models.title}!</a>
							</div>
						</div>
					</div>
				</div>

				<div class="col-span-5 md:col-span-3">
					<div class:list={[`grid gap-4 lg:gap-8 gallery`, imageCols]}>
						{
							build.builds_images.length < 4 &&
								build.builds_images.map((i, index, arr) => {
									return <Picture src={i.image_name} class:list={["w-full h-full object-cover rounded shadow-2xl col-span-2"]} sizes="1000px" />;
								})
						}

						{
							numberBetween(build.builds_images.length, 4, 8) &&
								build.builds_images.map((i, index, arr) => {
									return (
										<Picture
											src={i.image_name}
											class:list={["w-full h-full object-cover rounded shadow-2xl", remainder !== 0 && index + 1 === arr.length ? `col-span-${colSpan}` : `aspect-square`]}
											sizes={remainder !== 0 && index + 1 === arr.length ? `${colSpan * colWidth}px` : `${colWidth}px`}
										/>
									);
								})
						}

						{
							build.builds_images.length >= 9 &&
								build.builds_images.map((i, index, arr) => {
									return (
										<Picture
											src={i.image_name}
											class:list={["w-full h-full object-cover rounded shadow-2xl", remainder !== 0 && index + 1 === arr.length ? `col-span-${colSpan}` : `aspect-square`]}
											sizes={remainder !== 0 && index + 1 === arr.length ? `${colSpan * colWidth}px` : `${colWidth}px`}
										/>
									);
								})
						}
					</div>
				</div>
			</div>
		</Container>
	</Map>
</Layout>
