---
import Layout from "@/layouts/Layout";

// imports
import { getBuildImage } from "@/functions/Image";
import { getBuildTitle } from "@/functions/Content";
import { getEntry, getCollection } from "astro:content";
import { timeAgo } from "@/functions/DateTime";
import { numberBetween } from "@/functions/Misc";

import Link from "@/components/Link";
import Container from "@/components/Container";
import Gallery from "@/components/images/Gallery";
import Map from "@/components/content/background/Map";
import Picture from "@/components/images/Picture";
import Testimonial from "@/components/content/testimonials/TestimonialAlt";

export async function getStaticPaths() {
	const builds = await getCollection("builds");
	return builds.map((build) => ({
		params: {
			build: build.id,
		},
		props: {
			build,
		},
	}));
}
// content
const { build } = Astro.params;
const buildData = await getEntry("builds", build);

const make = await getEntry("makes", buildData.data.meta.make.id);
const model = await getEntry("models", buildData.data.meta.model.id);

let testimonial;
if (buildData.data.meta.testimonial) {
	testimonial = await getEntry("testimonials", buildData.data.meta.testimonial.id);
}

// create image array and remove the featured image from the array
const imageArray = Array.from({ length: buildData.data.images.total - 0 }, (_, i) => 0 + 1 + i);
const removals = [buildData.data.images.highlight[0], buildData.data.images.highlight[1], buildData.data.images.snippet];

const imagesWithoutHero = imageArray.filter((item) => item !== buildData.data.images.snippet);
const imagesWithoutAll = imageArray.filter((item) => !removals.includes(item));

const imageCols = imageArray.length >= 9 ? 3 : 2; // based on the total number of images, how many columns are needed
const remainder = imageArray.length >= 9 ? imagesWithoutAll.length % 3 : imagesWithoutHero.length % 2;
const colSpan = imageArray.length >= 9 ? 4 - remainder : 3 - remainder;
const colWidth = 450;
---

<Layout title={`Custom ${buildData.data.meta.year} ${make.data.title} ${model.data.title} ${buildData.data.meta.trim ? `${buildData.data.meta.trim} ` : ``}Built by THOR Off-Road`}>
	<div class="bg-torch-red-600 text-white section-small">
		<Container classes="space-y-4">
			<h1 class="text-balance uppercase font-bold text-center lg:text-left lg:max-w-3xl">{getBuildTitle(buildData.id)}</h1>

			<div class="flex flex-col items-center sm:flex-row gap-4 justify-center lg:justify-start">
				<div>Completed {timeAgo(buildData.data.date)}</div>
				<div class="hidden sm:block">&middot;</div>
				<a href={`builds?buildMake=${make.id}&buildModel=${model.data.slug}`} class="font-semibold hover:underline">More {model.data.title} Builds &gt;</a>
			</div>
		</Container>
	</div>

	<div class="bg-stone-700 section-small">
		<Container classes="space-y-8">
			<div class="grid grid-cols-6 grid-rows-2 gap-8 h-full md:h-[40vh] lg:h-[700px] gallery">
				<Picture
					src={getBuildImage(buildData.id, buildData.data.images.snippet)}
					alt={getBuildTitle(buildData.id)}
					class:list={["w-full h-full object-cover row-span-2 rounded shadow-2xl", buildData.data.images.total >= 9 ? "col-span-6 md:col-span-4" : "col-span-6"]}
					loading="eager"
				/>
				{
					imageArray.length >= 9 && (
						<>
							<Picture src={getBuildImage(buildData.id, buildData.data.images.highlight[0])} alt={getBuildTitle(buildData.id)} class="object-cover w-full h-full rounded shadow-2xl col-span-3 md:col-span-2" loading="eager" />
							<Picture src={getBuildImage(buildData.id, buildData.data.images.highlight[1])} alt={getBuildTitle(buildData.id)} class="object-cover w-full h-full rounded shadow-2xl col-span-3 md:col-span-2" loading="eager" />
						</>
					)
				}
			</div>
		</Container>
	</div>

	<Map classes="section-small bg-rock-100" opacity={0.03}>
		<Container>
			<div class="grid grid-cols-5 gap-8">
				<div class="col-span-5 lg:col-span-2 w-full h-full">
					<div class="sticky top-36 space-y-12 backdrop-blur-md bg-white/25 px-8 py-12 rounded">
						<div class="space-y-12">
							{
								buildData.data.meta.goals && (
									<div class="space-y-6">
										<h2>Summary</h2>
										<div class="space-y-6 text-lg leading-loose" set:html={buildData.data.meta.goals} />
									</div>
								)
							}

							<div class="space-y-6">
								<h2>Parts List</h2>
								<div class:list={["space-y-2", buildData.data.meta.parts.length < 4 ? "columns-1" : "columns-1"]}>
									{buildData.data.meta.parts.map((p) => <div>{p}</div>)}
								</div>
							</div>

							{
								buildData.data.meta.testimonial && (
									<div class="text-base space-y-4">
										<Testimonial content={testimonial} />
									</div>
								)
							}

							<!-- {
								buildData.data.video && (
									<div class="align-self-end flex-none">
										<a
											href={getMedia(`images/builds/${buildData.id}/${buildData.data.video.filename}.mp4`)}
											data-sources={`[{"src":"${getMedia(`images/builds/${buildData.id}/${buildData.data.video.filename}.mp4`)}", "type": "video/mp4" }]`}
											data-width={buildData.data.video.width}
											data-height={buildData.data.video.height}
											class="video text-xs sm:text-sm flex items-center font-medium gap-2"
										>
											<span>
												Watch the
												<br />
												Build Video
											</span>
											<Icon icon="hero/PlayCircleFill" class="h-6 sm:h-10" />
										</a>
									</div>
								)
							}--->

							<div class="hidden lg:block space-y-8">
								<h2>Let's <strong>Get Started</strong></h2>
								<div class="leading-relaxed">
									There are endless options for your {model.data.title} and we can help design, build and install everthing needed for your adventure. Give us a call or e-mail and let's get started today!
								</div>
								<Link href="/contact" inverse={true}>Build Your {model.data.title}!</Link>
							</div>
						</div>
					</div>
				</div>

				<div class="col-span-5 lg:col-span-3">
					<div class:list={[`grid gap-8 grid-cols-${imageCols} gallery`]}>
						{
							imageArray.length < 4 &&
								imagesWithoutHero.map((i, index, arr) => {
									return <Picture src={getBuildImage(buildData.id, i)} alt={getBuildTitle(buildData.id)} class:list={["w-full h-full object-cover rounded shadow-2xl col-span-2"]} sizes="1000px" />;
								})
						}

						{
							numberBetween(imageArray.length, 4, 8) &&
								imagesWithoutHero.map((i, index, arr) => {
									return (
										<Picture
											src={getBuildImage(buildData.id, i)}
											alt={getBuildTitle(buildData.id)}
											class:list={["w-full h-full object-cover rounded shadow-2xl", remainder !== 0 && index + 1 === arr.length ? `col-span-${colSpan}` : `aspect-square`]}
											sizes={remainder !== 0 && index + 1 === arr.length ? `${colSpan * colWidth}px` : `${colWidth}px`}
										/>
									);
								})
						}

						{
							imageArray.length >= 9 &&
								imagesWithoutAll.map((i, index, arr) => {
									return (
										<Picture
											src={getBuildImage(buildData.id, i)}
											alt={getBuildTitle(buildData.id)}
											class:list={["w-full h-full object-cover rounded shadow-2xl", remainder !== 0 && index + 1 === arr.length ? `col-span-${colSpan}` : `aspect-square`]}
											sizes={remainder !== 0 && index + 1 === arr.length ? `${colSpan * colWidth}px` : `${colWidth}px`}
										/>
									);
								})
						}
					</div>
				</div>
			</div>
		</Container>
	</Map>
</Layout>
