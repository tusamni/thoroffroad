---
// imports
import { getImage } from "astro:assets";
import { imageConfig } from "@/config";

import imageSize from "probe-image-size";

// props
interface Props {
    src: string;
    alt: string;
    loading?: string;
    sizes?: string;
}
const { src, alt, sizes = "100vw", loading = "lazy", ...attrs } = Astro.props;

// content
const fullPath = `${imageConfig.cloudUrl}/images/${src}`;
const optimizedImages = [];

// loop through all the necessary image widths
for (let size of imageConfig.imageSizes) {
    optimizedImages.push(await getImage({ src: fullPath, format: "webp", width: size, height: size }));
}

// create the srcset attribute
const sources = optimizedImages.map((i) => {
    return `${i.src} ${i.attributes.width}w`;
});
const srcset = sources.join(", ");

// get the dimensions of the image
let dimensions;
if (import.meta.env.PROD) {
    dimensions = await imageSize(fullPath);
} else {
    dimensions = {
        width: 500,
        height: 500,
    };
}
---

<img src={optimizedImages[0].src} srcset={srcset} width={dimensions.width} height={dimensions.height} loading={loading} sizes={sizes} alt={alt} {...attrs} data-img={optimizedImages[0].src} data-width={dimensions.width} data-height={dimensions.height} />
